//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCF_Assignment_1.ProgramService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="JobOpenings", Namespace="http://schemas.datacontract.org/2004/07/HelloService")]
    [System.SerializableAttribute()]
    public partial class JobOpenings : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string JobNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RoleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string JobName {
            get {
                return this.JobNameField;
            }
            set {
                if ((object.ReferenceEquals(this.JobNameField, value) != true)) {
                    this.JobNameField = value;
                    this.RaisePropertyChanged("JobName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Role {
            get {
                return this.RoleField;
            }
            set {
                if ((object.ReferenceEquals(this.RoleField, value) != true)) {
                    this.RoleField = value;
                    this.RaisePropertyChanged("Role");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ProgramService.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DoWork", ReplyAction="http://tempuri.org/IService/DoWorkResponse")]
        void DoWork();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DoWork", ReplyAction="http://tempuri.org/IService/DoWorkResponse")]
        System.Threading.Tasks.Task DoWorkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SayHello", ReplyAction="http://tempuri.org/IService/SayHelloResponse")]
        string SayHello(string Name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SayHello", ReplyAction="http://tempuri.org/IService/SayHelloResponse")]
        System.Threading.Tasks.Task<string> SayHelloAsync(string Name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/TodayProgram", ReplyAction="http://tempuri.org/IService/TodayProgramResponse")]
        string TodayProgram(string Name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/TodayProgram", ReplyAction="http://tempuri.org/IService/TodayProgramResponse")]
        System.Threading.Tasks.Task<string> TodayProgramAsync(string Name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Add", ReplyAction="http://tempuri.org/IService/AddResponse")]
        int Add(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Add", ReplyAction="http://tempuri.org/IService/AddResponse")]
        System.Threading.Tasks.Task<int> AddAsync(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Subract", ReplyAction="http://tempuri.org/IService/SubractResponse")]
        int Subract(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Subract", ReplyAction="http://tempuri.org/IService/SubractResponse")]
        System.Threading.Tasks.Task<int> SubractAsync(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Multiply", ReplyAction="http://tempuri.org/IService/MultiplyResponse")]
        int Multiply(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Multiply", ReplyAction="http://tempuri.org/IService/MultiplyResponse")]
        System.Threading.Tasks.Task<int> MultiplyAsync(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Divide", ReplyAction="http://tempuri.org/IService/DivideResponse")]
        int Divide(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Divide", ReplyAction="http://tempuri.org/IService/DivideResponse")]
        System.Threading.Tasks.Task<int> DivideAsync(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/JobOpenings", ReplyAction="http://tempuri.org/IService/JobOpeningsResponse")]
        System.Collections.Generic.List<WCF_Assignment_1.ProgramService.JobOpenings> JobOpenings();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/JobOpenings", ReplyAction="http://tempuri.org/IService/JobOpeningsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WCF_Assignment_1.ProgramService.JobOpenings>> JobOpeningsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/JobOpeningsByRole", ReplyAction="http://tempuri.org/IService/JobOpeningsByRoleResponse")]
        System.Collections.Generic.List<WCF_Assignment_1.ProgramService.JobOpenings> JobOpeningsByRole(string Role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/JobOpeningsByRole", ReplyAction="http://tempuri.org/IService/JobOpeningsByRoleResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WCF_Assignment_1.ProgramService.JobOpenings>> JobOpeningsByRoleAsync(string Role);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : WCF_Assignment_1.ProgramService.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<WCF_Assignment_1.ProgramService.IService>, WCF_Assignment_1.ProgramService.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void DoWork() {
            base.Channel.DoWork();
        }
        
        public System.Threading.Tasks.Task DoWorkAsync() {
            return base.Channel.DoWorkAsync();
        }
        
        public string SayHello(string Name) {
            return base.Channel.SayHello(Name);
        }
        
        public System.Threading.Tasks.Task<string> SayHelloAsync(string Name) {
            return base.Channel.SayHelloAsync(Name);
        }
        
        public string TodayProgram(string Name) {
            return base.Channel.TodayProgram(Name);
        }
        
        public System.Threading.Tasks.Task<string> TodayProgramAsync(string Name) {
            return base.Channel.TodayProgramAsync(Name);
        }
        
        public int Add(int a, int b) {
            return base.Channel.Add(a, b);
        }
        
        public System.Threading.Tasks.Task<int> AddAsync(int a, int b) {
            return base.Channel.AddAsync(a, b);
        }
        
        public int Subract(int a, int b) {
            return base.Channel.Subract(a, b);
        }
        
        public System.Threading.Tasks.Task<int> SubractAsync(int a, int b) {
            return base.Channel.SubractAsync(a, b);
        }
        
        public int Multiply(int a, int b) {
            return base.Channel.Multiply(a, b);
        }
        
        public System.Threading.Tasks.Task<int> MultiplyAsync(int a, int b) {
            return base.Channel.MultiplyAsync(a, b);
        }
        
        public int Divide(int a, int b) {
            return base.Channel.Divide(a, b);
        }
        
        public System.Threading.Tasks.Task<int> DivideAsync(int a, int b) {
            return base.Channel.DivideAsync(a, b);
        }
        
        public System.Collections.Generic.List<WCF_Assignment_1.ProgramService.JobOpenings> JobOpenings() {
            return base.Channel.JobOpenings();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WCF_Assignment_1.ProgramService.JobOpenings>> JobOpeningsAsync() {
            return base.Channel.JobOpeningsAsync();
        }
        
        public System.Collections.Generic.List<WCF_Assignment_1.ProgramService.JobOpenings> JobOpeningsByRole(string Role) {
            return base.Channel.JobOpeningsByRole(Role);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WCF_Assignment_1.ProgramService.JobOpenings>> JobOpeningsByRoleAsync(string Role) {
            return base.Channel.JobOpeningsByRoleAsync(Role);
        }
    }
}
